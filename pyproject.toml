[project]
name = "reporepo"
version = "0.1.0"
description = "RepoRepo lets you repo GitHub repositories!"
readme = "README.md"
authors = [
    { name = "Gregory M. Kapfhammer", email = "gkapfham@allegheny.edu" }
]
requires-python = ">=3.12"
dependencies = [
    "requests>=2.32.3",
    "rich>=13.9.4",
    "typer>=0.15.1",
]

[dependency-groups]
dev = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "ruff>=0.9.6",
    "taskipy>=1.14.1",
]

[project.scripts]
reporepo = "reporepo.main:app"

[tool.ruff]
line-length = 79
lint.ignore = [
    "E501", # do not check line length
]
lint.select = [
    "E",    # pycodestyle
    "D",    # pydocstyle
    "I",    # isort
    "F",    # Pyflakes
    "PL",   # pylint
    "Q",    # flake8-quotes
    "RUF",  # ruff-specific
    "W",    # pycodestyle warnings
    "T201"  # flake8-print
]

[tool.isort]
include_trailing_comma = true
force_single_line = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.taskipy.variables]
project = "reporepo"
tests = "tests"
check-command = { var = "ruff check {project} {tests}", recursive = true }
coverage-test-command = "pytest -s --cov-context=test --cov-fail-under=90 --cov-report term-missing --cov-report json --cov --cov-branch"
coverage-test-command-silent = "pytest -x --show-capture=no --cov-report term-missing --cov-report json --cov --cov-branch"
developer-test-command = "pytest -x -s"
developer-test-silent-command = "pytest -x --show-capture=no"
fixformat-command = { var = "ruff format {project} {tests}", recursive = true }
format-command = { var = "ruff format --check {project} {tests}", recursive = true }
symbex-typed-command = {var = "symbex -s --untyped -d {project} --check", recursive = true}
symbex-documented-command = {var = "symbex -s --undocumented -d {project} --check", recursive = true}
mypy-command = {var = "mypy {project}", recursive = true}

[tool.taskipy.tasks]
all = "task lint && task test"
lint = "task format && task check && task mypy"
check = { cmd = "{check-command}", help = "Run the ruff linting checks", use_vars = true }
format = { cmd = "{format-command}", help = "Run the ruff formatter on source code", use_vars = true }
format-fix = { cmd = "{fixformat-command}", help = "Run the ruff formatter to fix source code", use_vars = true }
mypy = { cmd = "{mypy-command}", help = "Run the mypy type checker for potential type errors", use_vars = true }
symbex = "task symbex-typed && task symbex-documented"
symbex-typed = { cmd = "{symbex-typed-command}", help = "Run symbex for fully typed functions", use_vars = true }
symbex-documented = { cmd = "{symbex-documented-command}", help = "Run symbex for documentation", use_vars = true }
test = { cmd = "pytest -x -s -vv", help = "Run the pytest test suite using order randomization and test distribution" }
test-silent = { cmd = "pytest -x --show-capture=no -n auto", help = "Run the pytest test suite without showing output" }
test-silent-not-randomly = { cmd = "pytest -x --show-capture=no -p no:randomly", help = "Run the pytest test suite without showing output and order randomization" }

[tool.uv]
no-binary-package = ["ruff"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
